/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Sabujak
 * ÏÇ¨Î∂ÄÏûë API Description
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { axiosInstance } from '../../../orval.axios';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const appControllerGetHome = (signal?: AbortSignal) => {
  return axiosInstance<void>({ url: `/`, method: 'GET', signal });
};

export const getAppControllerGetHomeQueryKey = () => {
  return [`/`] as const;
};

export const getAppControllerGetHomeQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHome>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHome>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHomeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHome>>> = ({ signal }) =>
    appControllerGetHome(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHome>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AppControllerGetHomeQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHome>>
>;
export type AppControllerGetHomeQueryError = unknown;

export function useAppControllerGetHome<
  TData = Awaited<ReturnType<typeof appControllerGetHome>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHome>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHome>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHome>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetHome<
  TData = Awaited<ReturnType<typeof appControllerGetHome>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHome>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHome>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHome>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAppControllerGetHome<
  TData = Awaited<ReturnType<typeof appControllerGetHome>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHome>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAppControllerGetHome<
  TData = Awaited<ReturnType<typeof appControllerGetHome>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHome>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAppControllerGetHomeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
