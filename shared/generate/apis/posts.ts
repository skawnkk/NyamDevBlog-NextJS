/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Sabujak
 * ÏÇ¨Î∂ÄÏûë API Description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreatePostDto,
  PostsControllerGetPostsParams,
  PostsModel,
  PostsPaginateResponseDto,
  UpdatePostDto,
} from '../schemas';

import { axiosInstance } from '../../../orval.axios';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const postsControllerGetPosts = (
  params?: PostsControllerGetPostsParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostsPaginateResponseDto>({ url: `/posts`, method: 'GET', params, signal });
};

export const getPostsControllerGetPostsQueryKey = (params?: PostsControllerGetPostsParams) => {
  return [`/posts`, ...(params ? [params] : [])] as const;
};

export const getPostsControllerGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof postsControllerGetPosts>>,
  TError = unknown,
>(
  params?: PostsControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPosts>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPostsControllerGetPostsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof postsControllerGetPosts>>> = ({
    signal,
  }) => postsControllerGetPosts(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof postsControllerGetPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostsControllerGetPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerGetPosts>>
>;
export type PostsControllerGetPostsQueryError = unknown;

export function usePostsControllerGetPosts<
  TData = Awaited<ReturnType<typeof postsControllerGetPosts>>,
  TError = unknown,
>(
  params: undefined | PostsControllerGetPostsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPosts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsControllerGetPosts>>,
          TError,
          Awaited<ReturnType<typeof postsControllerGetPosts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostsControllerGetPosts<
  TData = Awaited<ReturnType<typeof postsControllerGetPosts>>,
  TError = unknown,
>(
  params?: PostsControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPosts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsControllerGetPosts>>,
          TError,
          Awaited<ReturnType<typeof postsControllerGetPosts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostsControllerGetPosts<
  TData = Awaited<ReturnType<typeof postsControllerGetPosts>>,
  TError = unknown,
>(
  params?: PostsControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostsControllerGetPosts<
  TData = Awaited<ReturnType<typeof postsControllerGetPosts>>,
  TError = unknown,
>(
  params?: PostsControllerGetPostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPosts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPostsControllerGetPostsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postsControllerPostPosts = (createPostDto: CreatePostDto, signal?: AbortSignal) => {
  return axiosInstance<void>({
    url: `/posts`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createPostDto,
    signal,
  });
};

export const getPostsControllerPostPostsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsControllerPostPosts>>,
    TError,
    { data: CreatePostDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsControllerPostPosts>>,
  TError,
  { data: CreatePostDto },
  TContext
> => {
  const mutationKey = ['postsControllerPostPosts'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsControllerPostPosts>>,
    { data: CreatePostDto }
  > = props => {
    const { data } = props ?? {};

    return postsControllerPostPosts(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsControllerPostPostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerPostPosts>>
>;
export type PostsControllerPostPostsMutationBody = CreatePostDto;
export type PostsControllerPostPostsMutationError = unknown;

export const usePostsControllerPostPosts = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postsControllerPostPosts>>,
      TError,
      { data: CreatePostDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postsControllerPostPosts>>,
  TError,
  { data: CreatePostDto },
  TContext
> => {
  const mutationOptions = getPostsControllerPostPostsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postsControllerGetPost = (id: number, signal?: AbortSignal) => {
  return axiosInstance<PostsModel>({ url: `/posts/${id}`, method: 'GET', signal });
};

export const getPostsControllerGetPostQueryKey = (id: number) => {
  return [`/posts/${id}`] as const;
};

export const getPostsControllerGetPostQueryOptions = <
  TData = Awaited<ReturnType<typeof postsControllerGetPost>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPost>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPostsControllerGetPostQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof postsControllerGetPost>>> = ({ signal }) =>
    postsControllerGetPost(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof postsControllerGetPost>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PostsControllerGetPostQueryResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerGetPost>>
>;
export type PostsControllerGetPostQueryError = unknown;

export function usePostsControllerGetPost<
  TData = Awaited<ReturnType<typeof postsControllerGetPost>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPost>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsControllerGetPost>>,
          TError,
          Awaited<ReturnType<typeof postsControllerGetPost>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostsControllerGetPost<
  TData = Awaited<ReturnType<typeof postsControllerGetPost>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPost>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof postsControllerGetPost>>,
          TError,
          Awaited<ReturnType<typeof postsControllerGetPost>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function usePostsControllerGetPost<
  TData = Awaited<ReturnType<typeof postsControllerGetPost>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPost>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function usePostsControllerGetPost<
  TData = Awaited<ReturnType<typeof postsControllerGetPost>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof postsControllerGetPost>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPostsControllerGetPostQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postsControllerPatchPost = (id: number, updatePostDto: UpdatePostDto) => {
  return axiosInstance<void>({
    url: `/posts/${id}`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updatePostDto,
  });
};

export const getPostsControllerPatchPostMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsControllerPatchPost>>,
    TError,
    { id: number; data: UpdatePostDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsControllerPatchPost>>,
  TError,
  { id: number; data: UpdatePostDto },
  TContext
> => {
  const mutationKey = ['postsControllerPatchPost'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsControllerPatchPost>>,
    { id: number; data: UpdatePostDto }
  > = props => {
    const { id, data } = props ?? {};

    return postsControllerPatchPost(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsControllerPatchPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerPatchPost>>
>;
export type PostsControllerPatchPostMutationBody = UpdatePostDto;
export type PostsControllerPatchPostMutationError = unknown;

export const usePostsControllerPatchPost = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postsControllerPatchPost>>,
      TError,
      { id: number; data: UpdatePostDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postsControllerPatchPost>>,
  TError,
  { id: number; data: UpdatePostDto },
  TContext
> => {
  const mutationOptions = getPostsControllerPatchPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postsControllerDeletePost = (id: number) => {
  return axiosInstance<void>({ url: `/posts/${id}`, method: 'DELETE' });
};

export const getPostsControllerDeletePostMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsControllerDeletePost>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsControllerDeletePost>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['postsControllerDeletePost'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsControllerDeletePost>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return postsControllerDeletePost(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsControllerDeletePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerDeletePost>>
>;

export type PostsControllerDeletePostMutationError = unknown;

export const usePostsControllerDeletePost = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postsControllerDeletePost>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postsControllerDeletePost>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostsControllerDeletePostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const postsControllerCreatePostsRandom = (signal?: AbortSignal) => {
  return axiosInstance<void>({ url: `/posts/random`, method: 'POST', signal });
};

export const getPostsControllerCreatePostsRandomMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postsControllerCreatePostsRandom>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postsControllerCreatePostsRandom>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['postsControllerCreatePostsRandom'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postsControllerCreatePostsRandom>>,
    void
  > = () => {
    return postsControllerCreatePostsRandom();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostsControllerCreatePostsRandomMutationResult = NonNullable<
  Awaited<ReturnType<typeof postsControllerCreatePostsRandom>>
>;

export type PostsControllerCreatePostsRandomMutationError = unknown;

export const usePostsControllerCreatePostsRandom = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postsControllerCreatePostsRandom>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postsControllerCreatePostsRandom>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostsControllerCreatePostsRandomMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
