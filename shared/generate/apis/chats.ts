/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Sabujak
 * ÏÇ¨Î∂ÄÏûë API Description
 * OpenAPI spec version: 1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { ChatsControllerPaginateChatParams } from '../schemas';

import { axiosInstance } from '../../../orval.axios';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const chatsControllerPaginateChat = (
  params?: ChatsControllerPaginateChatParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({ url: `/chats`, method: 'GET', params, signal });
};

export const getChatsControllerPaginateChatQueryKey = (
  params?: ChatsControllerPaginateChatParams,
) => {
  return [`/chats`, ...(params ? [params] : [])] as const;
};

export const getChatsControllerPaginateChatQueryOptions = <
  TData = Awaited<ReturnType<typeof chatsControllerPaginateChat>>,
  TError = unknown,
>(
  params?: ChatsControllerPaginateChatParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof chatsControllerPaginateChat>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getChatsControllerPaginateChatQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chatsControllerPaginateChat>>> = ({
    signal,
  }) => chatsControllerPaginateChat(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof chatsControllerPaginateChat>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ChatsControllerPaginateChatQueryResult = NonNullable<
  Awaited<ReturnType<typeof chatsControllerPaginateChat>>
>;
export type ChatsControllerPaginateChatQueryError = unknown;

export function useChatsControllerPaginateChat<
  TData = Awaited<ReturnType<typeof chatsControllerPaginateChat>>,
  TError = unknown,
>(
  params: undefined | ChatsControllerPaginateChatParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof chatsControllerPaginateChat>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof chatsControllerPaginateChat>>,
          TError,
          Awaited<ReturnType<typeof chatsControllerPaginateChat>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useChatsControllerPaginateChat<
  TData = Awaited<ReturnType<typeof chatsControllerPaginateChat>>,
  TError = unknown,
>(
  params?: ChatsControllerPaginateChatParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof chatsControllerPaginateChat>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof chatsControllerPaginateChat>>,
          TError,
          Awaited<ReturnType<typeof chatsControllerPaginateChat>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useChatsControllerPaginateChat<
  TData = Awaited<ReturnType<typeof chatsControllerPaginateChat>>,
  TError = unknown,
>(
  params?: ChatsControllerPaginateChatParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof chatsControllerPaginateChat>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useChatsControllerPaginateChat<
  TData = Awaited<ReturnType<typeof chatsControllerPaginateChat>>,
  TError = unknown,
>(
  params?: ChatsControllerPaginateChatParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof chatsControllerPaginateChat>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getChatsControllerPaginateChatQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
