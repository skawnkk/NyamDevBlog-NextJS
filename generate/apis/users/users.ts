/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Sabujak
 * ÏÇ¨Î∂ÄÏûë API Description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  UpdateUserProfileDto
} from '../../schemas';

import { axiosInstance } from '../../../orval.axios';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const usersControllerGetUsers = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/users`, method: 'GET', signal
    },
      );
    }
  

export const getUsersControllerGetUsersQueryKey = () => {
    return [`/users`] as const;
    }

    
export const getUsersControllerGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof usersControllerGetUsers>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersControllerGetUsersQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerGetUsers>>> = ({ signal }) => usersControllerGetUsers(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersControllerGetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerGetUsers>>>
export type UsersControllerGetUsersQueryError = unknown


export function useUsersControllerGetUsers<TData = Awaited<ReturnType<typeof usersControllerGetUsers>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerGetUsers>>,
          TError,
          Awaited<ReturnType<typeof usersControllerGetUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersControllerGetUsers<TData = Awaited<ReturnType<typeof usersControllerGetUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerGetUsers>>,
          TError,
          Awaited<ReturnType<typeof usersControllerGetUsers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersControllerGetUsers<TData = Awaited<ReturnType<typeof usersControllerGetUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUsers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useUsersControllerGetUsers<TData = Awaited<ReturnType<typeof usersControllerGetUsers>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUsers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersControllerGetUsersQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usersControllerGetUser = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/users/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getUsersControllerGetUserQueryKey = (id: number,) => {
    return [`/users/${id}`] as const;
    }

    
export const getUsersControllerGetUserQueryOptions = <TData = Awaited<ReturnType<typeof usersControllerGetUser>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersControllerGetUserQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerGetUser>>> = ({ signal }) => usersControllerGetUser(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUser>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UsersControllerGetUserQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerGetUser>>>
export type UsersControllerGetUserQueryError = unknown


export function useUsersControllerGetUser<TData = Awaited<ReturnType<typeof usersControllerGetUser>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUser>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerGetUser>>,
          TError,
          Awaited<ReturnType<typeof usersControllerGetUser>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersControllerGetUser<TData = Awaited<ReturnType<typeof usersControllerGetUser>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUser>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerGetUser>>,
          TError,
          Awaited<ReturnType<typeof usersControllerGetUser>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useUsersControllerGetUser<TData = Awaited<ReturnType<typeof usersControllerGetUser>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUser>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useUsersControllerGetUser<TData = Awaited<ReturnType<typeof usersControllerGetUser>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerGetUser>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getUsersControllerGetUserQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usersControllerUpdateUser = (
    id: number,
    updateUserProfileDto: UpdateUserProfileDto,
 ) => {
      
      
      return axiosInstance<void>(
      {url: `/users/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateUserProfileDto
    },
      );
    }
  


export const getUsersControllerUpdateUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateUser>>, TError,{id: number;data: UpdateUserProfileDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateUser>>, TError,{id: number;data: UpdateUserProfileDto}, TContext> => {

const mutationKey = ['usersControllerUpdateUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdateUser>>, {id: number;data: UpdateUserProfileDto}> = (props) => {
          const {id,data} = props ?? {};

          return  usersControllerUpdateUser(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersControllerUpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdateUser>>>
    export type UsersControllerUpdateUserMutationBody = UpdateUserProfileDto
    export type UsersControllerUpdateUserMutationError = unknown

    export const useUsersControllerUpdateUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdateUser>>, TError,{id: number;data: UpdateUserProfileDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof usersControllerUpdateUser>>,
        TError,
        {id: number;data: UpdateUserProfileDto},
        TContext
      > => {

      const mutationOptions = getUsersControllerUpdateUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    