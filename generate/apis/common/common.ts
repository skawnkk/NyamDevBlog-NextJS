/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Sabujak
 * ÏÇ¨Î∂ÄÏûë API Description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  CommonControllerPostImage200,
  CommonControllerPostImageBody
} from '../../schemas';

import { axiosInstance } from '../../../orval.axios';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * Blob Ïù¥ÎØ∏ÏßÄÎ•º ÏóÖÎ°úÎìúÌï©ÎãàÎã§.
 * @summary Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
 */
export const commonControllerPostImage = (
    commonControllerPostImageBody: CommonControllerPostImageBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(commonControllerPostImageBody.image !== undefined) {
 formData.append(`image`, commonControllerPostImageBody.image)
 }

      return axiosInstance<CommonControllerPostImage200>(
      {url: `/common/image`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getCommonControllerPostImageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commonControllerPostImage>>, TError,{data: CommonControllerPostImageBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof commonControllerPostImage>>, TError,{data: CommonControllerPostImageBody}, TContext> => {

const mutationKey = ['commonControllerPostImage'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof commonControllerPostImage>>, {data: CommonControllerPostImageBody}> = (props) => {
          const {data} = props ?? {};

          return  commonControllerPostImage(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CommonControllerPostImageMutationResult = NonNullable<Awaited<ReturnType<typeof commonControllerPostImage>>>
    export type CommonControllerPostImageMutationBody = CommonControllerPostImageBody
    export type CommonControllerPostImageMutationError = unknown

    /**
 * @summary Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
 */
export const useCommonControllerPostImage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof commonControllerPostImage>>, TError,{data: CommonControllerPostImageBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof commonControllerPostImage>>,
        TError,
        {data: CommonControllerPostImageBody},
        TContext
      > => {

      const mutationOptions = getCommonControllerPostImageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    