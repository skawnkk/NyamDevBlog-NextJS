/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Sabujak
 * ÏÇ¨Î∂ÄÏûë API Description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ChatMessagesControllerPaginateMessagesParams,
  CreateChatsMessageDto
} from '../../schemas';

import { axiosInstance } from '../../../orval.axios';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const chatMessagesControllerPaginateMessages = (
    cid: number,
    params?: ChatMessagesControllerPaginateMessagesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/chats/${cid}/messages`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getChatMessagesControllerPaginateMessagesQueryKey = (cid: number,
    params?: ChatMessagesControllerPaginateMessagesParams,) => {
    return [`/chats/${cid}/messages`, ...(params ? [params]: [])] as const;
    }

    
export const getChatMessagesControllerPaginateMessagesQueryOptions = <TData = Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError = unknown>(cid: number,
    params?: ChatMessagesControllerPaginateMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getChatMessagesControllerPaginateMessagesQueryKey(cid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>> = ({ signal }) => chatMessagesControllerPaginateMessages(cid,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ChatMessagesControllerPaginateMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>>
export type ChatMessagesControllerPaginateMessagesQueryError = unknown


export function useChatMessagesControllerPaginateMessages<TData = Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError = unknown>(
 cid: number,
    params: undefined |  ChatMessagesControllerPaginateMessagesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>,
          TError,
          Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useChatMessagesControllerPaginateMessages<TData = Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError = unknown>(
 cid: number,
    params?: ChatMessagesControllerPaginateMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>,
          TError,
          Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useChatMessagesControllerPaginateMessages<TData = Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError = unknown>(
 cid: number,
    params?: ChatMessagesControllerPaginateMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useChatMessagesControllerPaginateMessages<TData = Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError = unknown>(
 cid: number,
    params?: ChatMessagesControllerPaginateMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof chatMessagesControllerPaginateMessages>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getChatMessagesControllerPaginateMessagesQueryOptions(cid,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const chatMessagesControllerPostMessage = (
    cid: number,
    createChatsMessageDto: CreateChatsMessageDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/chats/${cid}/messages`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createChatsMessageDto, signal
    },
      );
    }
  


export const getChatMessagesControllerPostMessageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof chatMessagesControllerPostMessage>>, TError,{cid: number;data: CreateChatsMessageDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof chatMessagesControllerPostMessage>>, TError,{cid: number;data: CreateChatsMessageDto}, TContext> => {

const mutationKey = ['chatMessagesControllerPostMessage'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof chatMessagesControllerPostMessage>>, {cid: number;data: CreateChatsMessageDto}> = (props) => {
          const {cid,data} = props ?? {};

          return  chatMessagesControllerPostMessage(cid,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChatMessagesControllerPostMessageMutationResult = NonNullable<Awaited<ReturnType<typeof chatMessagesControllerPostMessage>>>
    export type ChatMessagesControllerPostMessageMutationBody = CreateChatsMessageDto
    export type ChatMessagesControllerPostMessageMutationError = unknown

    export const useChatMessagesControllerPostMessage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof chatMessagesControllerPostMessage>>, TError,{cid: number;data: CreateChatsMessageDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof chatMessagesControllerPostMessage>>,
        TError,
        {cid: number;data: CreateChatsMessageDto},
        TContext
      > => {

      const mutationOptions = getChatMessagesControllerPostMessageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    