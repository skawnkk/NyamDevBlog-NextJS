/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Sabujak
 * ÏÇ¨Î∂ÄÏûë API Description
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  AccessTokenDto,
  CreateUserDto
} from '../../schemas';

import { axiosInstance } from '../../../orval.axios';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary Access Token Ïû¨Î∞úÍ∏â (Ìó§ÎçîÎ°ú refresh ÌÜ†ÌÅ∞ Ï†ÑÎã¨)
 */
export const authControllerPostTokenAccess = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/auth/token/access`, method: 'POST', signal
    },
      );
    }
  


export const getAuthControllerPostTokenAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerPostTokenAccess>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerPostTokenAccess>>, TError,void, TContext> => {

const mutationKey = ['authControllerPostTokenAccess'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerPostTokenAccess>>, void> = () => {
          

          return  authControllerPostTokenAccess()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerPostTokenAccessMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerPostTokenAccess>>>
    
    export type AuthControllerPostTokenAccessMutationError = unknown

    /**
 * @summary Access Token Ïû¨Î∞úÍ∏â (Ìó§ÎçîÎ°ú refresh ÌÜ†ÌÅ∞ Ï†ÑÎã¨)
 */
export const useAuthControllerPostTokenAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerPostTokenAccess>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authControllerPostTokenAccess>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthControllerPostTokenAccessMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Refresh Token Ïû¨Î∞úÍ∏â (Ïø†ÌÇ§ Í∏∞Î∞ò)
 */
export const authControllerPostRefreshAccess = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/auth/token/refresh`, method: 'POST', signal
    },
      );
    }
  


export const getAuthControllerPostRefreshAccessMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerPostRefreshAccess>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerPostRefreshAccess>>, TError,void, TContext> => {

const mutationKey = ['authControllerPostRefreshAccess'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerPostRefreshAccess>>, void> = () => {
          

          return  authControllerPostRefreshAccess()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerPostRefreshAccessMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerPostRefreshAccess>>>
    
    export type AuthControllerPostRefreshAccessMutationError = unknown

    /**
 * @summary Refresh Token Ïû¨Î∞úÍ∏â (Ïø†ÌÇ§ Í∏∞Î∞ò)
 */
export const useAuthControllerPostRefreshAccess = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerPostRefreshAccess>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authControllerPostRefreshAccess>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthControllerPostRefreshAccessMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏ (accessToken + refreshToken Ïø†ÌÇ§Î°ú Î∞òÌôò)
 */
export const authControllerPostLoginWithEmail = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<AccessTokenDto>(
      {url: `/auth/login/email`, method: 'POST', signal
    },
      );
    }
  


export const getAuthControllerPostLoginWithEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerPostLoginWithEmail>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerPostLoginWithEmail>>, TError,void, TContext> => {

const mutationKey = ['authControllerPostLoginWithEmail'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerPostLoginWithEmail>>, void> = () => {
          

          return  authControllerPostLoginWithEmail()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerPostLoginWithEmailMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerPostLoginWithEmail>>>
    
    export type AuthControllerPostLoginWithEmailMutationError = unknown

    /**
 * @summary Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏ (accessToken + refreshToken Ïø†ÌÇ§Î°ú Î∞òÌôò)
 */
export const useAuthControllerPostLoginWithEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerPostLoginWithEmail>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authControllerPostLoginWithEmail>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthControllerPostLoginWithEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Ïù¥Î©îÏùº ÌöåÏõêÍ∞ÄÏûÖ
 */
export const authControllerPostRegisterWithEmail = (
    createUserDto: CreateUserDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<void>(
      {url: `/auth/register/email`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserDto, signal
    },
      );
    }
  


export const getAuthControllerPostRegisterWithEmailMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerPostRegisterWithEmail>>, TError,{data: CreateUserDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerPostRegisterWithEmail>>, TError,{data: CreateUserDto}, TContext> => {

const mutationKey = ['authControllerPostRegisterWithEmail'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerPostRegisterWithEmail>>, {data: CreateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerPostRegisterWithEmail(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerPostRegisterWithEmailMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerPostRegisterWithEmail>>>
    export type AuthControllerPostRegisterWithEmailMutationBody = CreateUserDto
    export type AuthControllerPostRegisterWithEmailMutationError = unknown

    /**
 * @summary Ïù¥Î©îÏùº ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useAuthControllerPostRegisterWithEmail = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerPostRegisterWithEmail>>, TError,{data: CreateUserDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authControllerPostRegisterWithEmail>>,
        TError,
        {data: CreateUserDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerPostRegisterWithEmailMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    